package game;

import java.awt.*;
import java.util.Arrays;

public class Map {
    public final int BLOCK_SIZE = 24;
    public final int N_BLOCKS = 20;
    public final int SCREEN_SIZE = N_BLOCKS * BLOCK_SIZE;

    private final short levelData[] = {
            19, 26, 26, 26, 18, 26, 26, 26, 26, 22, 19, 26, 26, 26, 26, 18, 26, 26, 26, 22, // 1
            21, 3, 2, 6, 21, 3, 2, 2, 6, 21, 21, 3, 2, 2, 6, 21, 3, 2, 6, 21, // 2
            21, 9, 8, 12, 21, 9, 8, 8, 12, 21, 21, 9, 8, 8, 12, 21, 9, 8, 12, 21, // 3
            17, 26, 26, 26, 16, 26, 18, 26, 26, 24, 24, 26, 26, 18, 26, 16, 26, 26, 26, 20, // 4
            21, 11, 10, 14, 21, 7, 21, 11, 10, 10, 10, 10, 14, 21, 7, 21, 11, 10, 14, 21, // 5
            25, 26, 26, 26, 20, 5, 25, 26, 26, 22, 19, 26, 26, 28, 5, 17, 26, 26, 26, 28, // 6
            2, 2, 2, 6, 21, 1, 10, 10, 14, 21, 21, 11, 10, 10, 4, 21, 3, 2, 2, 2, // 7
            32, 32, 32, 4, 21, 5, 3, 10, 10, 32, 32, 10, 10, 6, 5, 21, 1, 32, 32, 32, // 8
            32, 32, 32, 4, 21, 13, 5, 3, 2, 32, 32, 2, 6, 5, 13, 21, 1, 32, 32, 32, // 9
            32, 32, 32, 4, 17, 10, 4, 1, 32, 32, 32, 32, 4, 1, 10, 20, 1, 32, 32, 32, // 10
            32, 32, 32, 4, 21, 7, 5, 9, 8, 8, 8, 8, 12, 5, 7, 21, 1, 32, 32, 32, // 11
            32, 32, 32, 4, 21, 5, 1, 10, 10, 10, 10, 10, 10, 4, 5, 21, 1, 32, 32, 32, // 12
            8, 8, 8, 12, 21, 13, 5, 11, 10, 10, 10, 10, 14, 5, 13, 21, 9, 8, 8, 8, // 13
            19, 26, 26, 18, 24, 26, 24, 26, 26, 22, 19, 26, 26, 24, 26, 24, 18, 26, 26, 22, // 14
            21, 11, 6, 21, 11, 10, 10, 10, 14, 21, 21, 11, 10, 10, 10, 14, 21, 3, 14, 21, // 15
            25, 22, 5, 17, 18, 26, 18, 26, 26, 24, 24, 26, 26, 18, 26, 18, 20, 5, 19, 28, // 16
            14, 21, 13, 17, 20, 7, 21, 11, 10, 10, 10, 10, 14, 21, 7, 17, 20, 13, 21, 11, // 17
            19, 24, 26, 24, 28, 5, 25, 26, 26, 22, 19, 26, 26, 28, 5, 25, 24, 26, 24, 22, // 18
            21, 11, 10, 10, 10, 8, 10, 10, 14, 21, 21, 11, 10, 10, 8, 10, 10, 10, 14, 21, // 19
            25, 26, 26, 26, 26, 26, 26, 26, 26, 24, 24, 26, 26, 26, 26, 26, 26, 26, 26, 28  // 20
    };

    /*
    //DEBUG
    private final short levelData[] = {
            3, 10, 10, 10, 2, 10, 10, 10, 10, 6, 3, 10, 10, 10, 10, 2, 10, 10, 10, 6,
            5, 3, 2, 6, 5, 3, 2, 2, 6, 5, 5, 3, 2, 2, 6, 5, 3, 2, 6, 5,
            5, 9, 8, 12, 5, 9, 8, 8, 12, 5, 5, 9, 8, 8, 12, 5, 9, 8, 12, 5,
            1, 10, 10, 10, 0, 10, 2, 10, 10, 8, 8, 10, 10, 2, 10, 0, 10, 10, 10, 4,
            5, 11, 10, 14, 5, 7, 5, 11, 10, 10, 10, 10, 14, 5, 7, 5, 11, 10, 14, 5,
            9, 10, 10, 10, 4, 5, 9, 10, 10, 6, 3, 10, 10, 12, 5, 1, 10, 10, 10, 12,
            2, 2, 2, 6, 5, 1, 10, 10, 14, 5, 5, 11, 10, 10, 4, 5, 3, 2, 2, 2,
            32, 32, 32, 4, 5, 5, 3, 10, 10, 32, 32, 10, 10, 6, 5, 5, 1, 32, 32, 32,
            32, 32, 32, 4, 5, 13, 5, 3, 2, 32, 32, 2, 6, 5, 13, 5, 1, 32, 32, 32,
            32, 32, 32, 4, 1, 10, 4, 1, 32, 32, 32, 32, 4, 1, 10, 4, 1, 32, 32, 32,
            32, 32, 32, 4, 5, 7, 5, 9, 8, 8, 8, 8, 12, 5, 7, 5, 1, 32, 32, 32,
            32, 32, 32, 4, 5, 5, 1, 10, 10, 10, 10, 10, 10, 4, 5, 5, 1, 32, 32, 32,
            8, 8, 8, 12, 5, 13, 5, 11, 10, 10, 10, 10, 14, 5, 13, 5, 9, 8, 8, 8,
            3, 10, 10, 2, 8, 10, 8, 10, 10, 6, 3, 10, 10, 8, 10, 8, 2, 10, 10, 6,
            5, 11, 6, 5, 11, 10, 10, 10, 14, 5, 5, 11, 10, 10, 10, 14, 5, 3, 14, 5,
            9, 6, 5, 1, 2, 10, 2, 10, 10, 8, 8, 10, 10, 2, 10, 2, 4, 5, 3, 12,
            14, 5, 13, 1, 4, 7, 5, 11, 10, 10, 10, 10, 14, 5, 7, 1, 4, 13, 5, 11,
            3, 8, 10, 8, 12, 5, 9, 10, 10, 6, 3, 10, 10, 12, 5, 9, 8, 10, 8, 6,
            5, 11, 10, 10, 10, 8, 10, 10, 14, 5, 5, 11, 10, 10, 8, 10, 10, 10, 14, 5,
            25, 10, 10, 10, 10, 10, 10, 10, 10, 8, 8, 10, 10, 10, 10, 10, 10, 10, 10, 12
    };
     */

    public int[] screenData;

    public Map() {
        screenData = new int[SCREEN_SIZE];
        int i;
        for (i = 0; i < N_BLOCKS * N_BLOCKS; i++) {
            screenData[i] = levelData[i];
        }
    }

    public void draw(Graphics2D g2d) {
        short i = 0;
        int x, y;

        for (y = 0; y < SCREEN_SIZE; y += BLOCK_SIZE) {
            for (x = 0; x < SCREEN_SIZE; x += BLOCK_SIZE) {

                g2d.setColor(new Color(0, 72, 251));
                g2d.setStroke(new BasicStroke(5));

                if ((levelData[i] == 0)) {
                    g2d.fillRect(x, y, BLOCK_SIZE, BLOCK_SIZE);
                }

                if ((screenData[i] & 1) != 0) {
                    g2d.drawLine(x, y, x, y + BLOCK_SIZE - 1);
                }

                if ((screenData[i] & 2) != 0) {
                    g2d.drawLine(x, y, x + BLOCK_SIZE - 1, y);
                }

                if ((screenData[i] & 4) != 0) {
                    g2d.drawLine(x + BLOCK_SIZE - 1, y, x + BLOCK_SIZE - 1,
                            y + BLOCK_SIZE - 1);
                }

                if ((screenData[i] & 8) != 0) {
                    g2d.drawLine(x, y + BLOCK_SIZE - 1, x + BLOCK_SIZE - 1,
                            y + BLOCK_SIZE - 1);
                }

                if ((screenData[i] & 16) != 0) {
                    g2d.setColor(new Color(255, 255, 255));
                    g2d.fillOval(x + 10, y + 10, 6, 6);
                }

                i++;
            }
        }
    }

    public boolean gameDone() {
        return Arrays.stream(screenData)
                .limit(N_BLOCKS * N_BLOCKS)
                .noneMatch(value -> value >= 16 && value < 32);
    }

}
